//plugins {
//    id "com.google.cloud.artifactregistry.gradle-plugin" version "2.1.5"
//    id "mk-platform"
//}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply from: '../applesilicon.gradle'


//version = "${minecraft_version}-${mkcore_version}"
//
//
//List<Project> dependentProjects = [
//        project(":TargetingAPI"),
//        project(":MKWidgets")
//]
// This feels like a hack but there are weird errors without it
project.ext.dependentProjects.forEach {
    project.evaluationDependsOn(it.path)
}


def mixin_file = findProperty("mixin_file")
if (mixin_file) {
    mixin {
        add sourceSets.main, "${mod_id}.refmap.json"
        config mixin_file
        debug true
    }
}


repositories {
    maven {
        url "artifactregistry://us-central1-maven.pkg.dev/secure-garden-352216/chaosbuffalo-maven-repo"
    }
    mavenLocal()
    maven {
        name = 'CurseForge'
        url = 'https://minecraft.curseforge.com/api/maven/'
    }
    mavenCentral()
}


minecraft {
    def accessTransformerFile = file('src/main/resources/META-INF/accesstransformer.cfg')
    if (accessTransformerFile.exists()) {
        accessTransformer = accessTransformerFile
    }

    runs {
        configureEach {
            // Recommended logging data for a userdev environment
            // The markers can be changed as needed.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

//            property 'mixin.env.disableRefMap', 'true'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"
        }

        client {
            workingDirectory project.file('run')

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }
    }
}

dependencies {
    project.ext.dependentProjects.forEach {
        implementation(it)
    }
}


// Updated version of toml property injection from JEI
def replaceResources = tasks.register("replaceResources", Copy) {
    it.outputs.upToDateWhen { false }
    //Copy it into the build dir
    it.from(sourceSets.main.resources) {
        include "META-INF/mods.toml"
        expand project.properties
    }
    it.into "$buildDir/resources/main/"
}

processResources {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    exclude('META-INF/mods.toml')
    configure { finalizedBy(replaceResources) }
}

classes.configure {
    dependsOn(replaceResources)
}


// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
//jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
publish.dependsOn('reobfJar')

publishing {
    repositories {
        maven {
            url "artifactregistry://us-central1-maven.pkg.dev/secure-garden-352216/chaosbuffalo-maven-repo"
        }
    }
    publications {
        mavenJava(MavenPublication) {
            artifactId jar.baseName
            artifact jar
        }
    }
}
